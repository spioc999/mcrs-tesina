function [isFree] = isFreeEdge(from, to, obstacles) 

i = 1;
exitCondition = false;
isFree = true;

%ay + bx = c
%coefficients contain [a b c]

if from(1) == to(1)
    coefficients = [0; 1; from(1)];
else
    %y = mx + q ->  [m q]
    polyfit_edge = polyfit([from(1), to(1)], [from(2), to(2)], 1);
    coefficients = [1; -polyfit_edge(1); polyfit_edge(2)];
end


while(not(exitCondition))

    obstacle = obstacles(i, :);
    topBorderCoefficients = [1; 0; obstacle(2) + obstacle(4)];
    bottomBorderCoefficients = [1; 0; obstacle(2)];
    leftBorderCoefficients = [0; 1; obstacle(1)];
    rightBorderCoefficients = [0; 1; obstacle(1) + obstacle(3)];

    isIntersecting = checkIntersectionWithBorder( ...
        coefficients, ...
        topBorderCoefficients, ...
        from, ...
        to, ...
        [obstacle(1); obstacle(2) + obstacle(4)], ...
        [obstacle(1) + obstacle(3); obstacle(2) + obstacle(4)]...
    ) || checkIntersectionWithBorder( ...
        coefficients, ...
        bottomBorderCoefficients, ...
        from, ...
        to, ...
        [obstacle(1); obstacle(2)], ...
        [obstacle(1) + obstacle(3); obstacle(2)]...
    ) || checkIntersectionWithBorder( ...
        coefficients, ...
        leftBorderCoefficients, ...
        from, ...
        to, ...
        [obstacle(1); obstacle(2)], ...
        [obstacle(1); obstacle(2)+ obstacle(4)]...
    ) || checkIntersectionWithBorder( ...
        coefficients, ...
        rightBorderCoefficients, ...
        from, ...
        to, ...
        [obstacle(1) + obstacle(3); obstacle(2)], ...
        [obstacle(1) + obstacle(3); obstacle(2) + obstacle(4)]...
    );

    isFree = ~isIntersecting;

    exitCondition = i >= size(obstacles, 1) || not(isFree);
    i = i+1;
end
end

function [isIntersectingBorder] = checkIntersectionWithBorder(edge, border, from, to, firstCorner, lastCorner)

isIntersectingBorder = false;

if isequal(edge, border) %same function, so only if you want to check border 
    isIntersectingBorder = true;
else

    %[y x]
    pointOfIntersection = [edge(1) edge(2); border(1) border(2)] \ [edge(3); border(3)];
    
    if nnz(pointOfIntersection) > 0 || (edge(3) == 0 && border(3) == 0) %(0, 0) is contained in both lines
        isIntersectingBorder = pointOfIntersection(2) >= min(from(1), to(1))...
                            && pointOfIntersection(2) <= max(from(1), to(1))...
                            && pointOfIntersection(1) >= min(from(2), to(2))...
                            && pointOfIntersection(1) <= max(from(2), to(2))...
                            && pointOfIntersection(2) >= min(firstCorner(1), lastCorner(1))...
                            && pointOfIntersection(2) <= max(firstCorner(1), lastCorner(1))...
                            && pointOfIntersection(1) >= min(firstCorner(2), lastCorner(2))...
                            && pointOfIntersection(1) <= max(firstCorner(2), lastCorner(2));
    end

end
end